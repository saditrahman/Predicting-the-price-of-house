# -*- coding: utf-8 -*-
"""Predicting the price of house.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xz1nrYtWKSFwecExkEnfzDlWIcdT2CK0

<h1>Predicting the price of house</h1>
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Dataset/House_Price.csv")
df.head()

df.tail()

df.shape

df.describe()

df.info()

"""<h1>Exploratory Analysis</h1>"""

sns.jointplot(x = "crime_rate", y="price", data=df)

sns.jointplot(x = "n_hot_rooms", y="price", data=df)

sns.jointplot(x="air_qual", y="price", data=df)

sns.jointplot(x="rainfall", y="price", data=df)

sns.countplot(x="bus_ter", data=df)

sns.countplot(x="airport", data=df)

sns.countplot(x="waterbody", data=df)

corr = df.corr()
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(
    ax.get_xticklabels(),
    rotation=45,
    horizontalalignment='right'
);

"""<h3>Couple of Observations</h3>
<ol>
<li>Missing values in "no_hot_rooms"</li>
<li>Only "Yes" responses in "bus_ter"</li>
<li>Skewness exists in the missing values</li>
<li>Darker colors represent more the magnitude</li>
</ol>

<h1>Handling missing values</h1>
"""

df.info()

df.n_hos_beds = df.n_hos_beds.fillna(df.n_hos_beds.mean())

df.info()

"""<h1>Variable Manipulation</h1>"""

df['avg_dist'] = (df.dist1 + df.dist2 + df.dist3 + df.dist4)/4

del df['dist1']
del df['dist2']
del df['dist3']
del df['dist4']

df.head()

df.corr()

plt.scatter(df.air_qual, df.parks)
plt.xlabel("Parks")
plt.ylabel("Air Quality")
plt.show()

plt.scatter(df.room_num, df.price)
plt.xlabel("Room number")
plt.ylabel("Price")
plt.show()

"""<h1>Linear Regression</h1>"""

import statsmodels.api as sn
X = sn.add_constant(df['room_num'])
lm = sn.OLS(df['price'], X).fit()
lm.summary()

from sklearn.linear_model import LinearRegression
y = df['price']
X = df[['room_num']]

lm2 = LinearRegression()
lm2.fit(X,y)

print(lm2.intercept_, lm2.coef_)

sns.jointplot(x= df['room_num'], y = df['price'], data=df, kind='reg')

"""<h1>Predicting Linear Regression</h1>

<p>The Equation is:</p>

<p>9.0997* [room_num] + -34.6592</p>
"""

print("What would be the price if the number of rooms are 6.756?")
print(round((9.0997)*(6.756)-(34.6592),2))

"""<h1>Conclusion</h1>

<p>Hence, this was our evalution and prediction of the price. More to come in the future.</p>

<small>Kowsar Rahman</small>
"""